/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Task;

use Runtime.lib;
use Runtime.RuntimeUtils;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Runtime.Task.Tasks;
use Runtime.Task.TaskDriver;


class Entry
{
	
	/**
	 * Run cron
	 */
	static async void appRun()
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		Collection<TaskList> task_lists = @.entities.filter( lib::isInstance(classof TaskList) );
		
		int sz = @.cli_args.count();
		Collection<TaskMethod> methods = Tasks::getTaskMethods();
		
		/* Output all tasks */
		if (sz == 1)
		{
			output.writeln("Methods:");
			Map<bool> h = new Map();
			
			for (int i=0; i<methods.count(); i++)
			{
				TaskMethod m = methods.item(i);
				
				string content = "";
				if (m.alias != "" and not h.has(m.alias))
				{
					content = m.alias;
					h.setValue(m.alias, true);
				}
				else content = m.class_name ~ "::" ~ m.method_name;
				if (m.description != "") content ~= " - " ~ m.description;
				
				output.writeln("  " ~ content);
			}
		}
		
		/* Call method */
		else if (sz >= 2)
		{
			string cmd = @.cli_args.item(1);
			TaskMethod find_method = methods.findItem
			(
				bool (TaskMethod m) use (cmd)
				{
					if (m.alias == cmd) return true;
					Collection arr = rs::split("::", cmd);
					string class_name = arr.get(0, "");
					string method_name = arr.get(1, "");
					if (m.class_name == class_name and m.method_name == method_name) return true;
					return false;
				}
			);
			
			if (find_method != null)
			{
				fn f = rtl::method(find_method.class_name, find_method.method_name);
				await f();
			}
			else
			{
				output.writeln("Method not found");
			}
		}
		
	}
	
}