/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Task;

use Runtime.lib;
use Runtime.RuntimeUtils;
use Runtime.Annotations.IntrospectionClass;
use Runtime.Task.TaskLib;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Runtime.Task.TaskOutputProvider;


class Entry
{
	
	/**
	 * Run cron
	 */
	static async void run()
	{
		TaskOutputProvider output = @ -> method getProvider(classof TaskOutputProvider);
		Collection<TaskList> task_lists = @.entities.filter( lib::isInstance(classof TaskList) );
		
		int sz = @.cli_args.count();
		
		/* Output all tasks */
		if (sz == 1)
		{
			output -> method writeln("Methods:");
			
			Collection<string> methods = TaskLib::getTaskMethods();
			for (int i=0; i<methods.count(); i++)
			{
				output -> method writeln ("  " ~ methods.item(i));
			}
		}
		
		/* Call method */
		else if (sz == 2)
		{
			string cmd = @.cli_args.item(1);
			Collection arr = rs::split("::", cmd);
			string class_name = arr.get(0, "");
			string method_name = arr.get(1, "");
			if (static::canRun(class_name, method_name))
			{
				fn f = rtl::method(class_name, method_name);
				await rtl::apply(f, []);
			}
			else
			{
				output -> method writeln("Method not found");
			}
		}
		
	}
	
	
	
	/**
	 * Can run
	 */
	pure bool canRun(string class_name, string method_name)
	{
		Collection<TaskList> task_lists = @.entities.filter( lib::isInstance(classof TaskList) );
		
		TaskList task_list = task_lists.findItem
		(
			bool (TaskList task_list) use (class_name) => task_list.className() == class_name
		);
		
		if (task_list == null) return false;
		
		Collection<string> methods = RuntimeUtils::getMethodsIntrospection
		(
			class_name, [ classof TaskMethod ]
		);
		
		return methods.indexOf(method_name) != -1;
	}
	
}