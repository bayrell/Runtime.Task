/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Task;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.Task.TaskDriver;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;


@TaskList{}
class Tasks
{
	
	/**
	 * Returns task methods
	 */
	pure Collection<TaskMethod> getTaskMethods()
	{
		Vector<string> items = new Vector();
		Collection<TaskList> task_lists = @.entities.filter( lib::isInstance(classof TaskList) );
		for (int i=0; i<task_lists.count(); i++)
		{
			TaskList task_list = task_lists.item(i);
			string class_name = task_list.className();
			
			Collection<string> methods = rtl::getMethodsAnnotations(class_name);
			methods.each
			(
				void (Collection arr, string method_name) use (items, class_name)
				{
					for (int j=0; j<arr.count(); j++)
					{
						TaskMethod item = arr.item(j);
						if (item instanceof TaskMethod)
						{
							item = item.copy
							{
								"class_name": class_name,
								"method_name": method_name,
							};
							items.pushValue(item);
						}
					}
				}
			);
		}
		return items.toCollection();
	}
	
	
	
	/**
	 * Run cron
	 */
	@TaskMethod{ "alias": "entities", "description": "Show all entities" }
	static async void entities()
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		output.writeln ("List entities:");
		
		Collection<BaseStruct> entities = @.entities;
		if (@.cli_args.get(2, "") != "")
		{
			string class_name = @.cli_args.get(2, "");
			entities = entities.filter
			(
				bool (var obj) use (class_name) => obj.getClassName() == class_name
			);
		}
		
		for (int i=0; i<entities.count(); i++)
		{
			BaseStruct item = entities.item(i);
			output.writeln((i + 1) ~ ") " ~ item.logName());
		}
	}
	
	
}